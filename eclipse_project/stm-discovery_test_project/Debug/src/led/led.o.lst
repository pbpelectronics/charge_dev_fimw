   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"led.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	time_ms,8,8
  19              		.comm	batteryPower,1,1
  20              		.comm	isBattaryConnected,1,1
  21              		.section	.text.switchLed,"ax",%progbits
  22              		.align	2
  23              		.global	switchLed
  24              		.thumb
  25              		.thumb_func
  27              	switchLed:
  28              	.LFB29:
  29              		.file 1 "../src/led/led.c"
   1:../src/led/led.c **** /*
   2:../src/led/led.c ****  * led.c
   3:../src/led/led.c ****  *
   4:../src/led/led.c ****  *  Created on: 30 βεπ. 2013
   5:../src/led/led.c ****  *      Author: Ξλεκρ³ι
   6:../src/led/led.c ****  */
   7:../src/led/led.c **** #include "../common/common.h"
   8:../src/led/led.c **** #include "stm32f10x.h"
   9:../src/led/led.c **** 
  10:../src/led/led.c **** void switchLed(TIM_TypeDef * led, int greenPower, int bluePower, int redPower) {
  30              		.loc 1 10 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 F860     		str	r0, [r7, #12]
  46 0008 B960     		str	r1, [r7, #8]
  47 000a 7A60     		str	r2, [r7, #4]
  48 000c 3B60     		str	r3, [r7, #0]
  11:../src/led/led.c **** 	clearLed(led);
  49              		.loc 1 11 0
  50 000e F868     		ldr	r0, [r7, #12]
  51 0010 FFF7FEFF 		bl	clearLed
  12:../src/led/led.c **** 	led->LED_BLUE = bluePower;
  52              		.loc 1 12 0
  53 0014 7B68     		ldr	r3, [r7, #4]
  54 0016 9AB2     		uxth	r2, r3
  55 0018 FB68     		ldr	r3, [r7, #12]
  56 001a 9A86     		strh	r2, [r3, #52]	@ movhi
  13:../src/led/led.c **** 	led->LED_GREEN = greenPower;
  57              		.loc 1 13 0
  58 001c BB68     		ldr	r3, [r7, #8]
  59 001e 9AB2     		uxth	r2, r3
  60 0020 FB68     		ldr	r3, [r7, #12]
  61 0022 1A87     		strh	r2, [r3, #56]	@ movhi
  14:../src/led/led.c **** 	led->LED_RED = redPower;
  62              		.loc 1 14 0
  63 0024 3B68     		ldr	r3, [r7, #0]
  64 0026 9AB2     		uxth	r2, r3
  65 0028 FB68     		ldr	r3, [r7, #12]
  66 002a 9A87     		strh	r2, [r3, #60]	@ movhi
  15:../src/led/led.c **** }
  67              		.loc 1 15 0
  68 002c 07F11007 		add	r7, r7, #16
  69 0030 BD46     		mov	sp, r7
  70 0032 80BD     		pop	{r7, pc}
  71              		.cfi_endproc
  72              	.LFE29:
  74              		.section	.text.reswitchLed,"ax",%progbits
  75              		.align	2
  76              		.global	reswitchLed
  77              		.thumb
  78              		.thumb_func
  80              	reswitchLed:
  81              	.LFB30:
  16:../src/led/led.c **** 
  17:../src/led/led.c **** void reswitchLed(TIM_TypeDef * led, int greenPower, int bluePower, int redPower, int timeout) {
  82              		.loc 1 17 0
  83              		.cfi_startproc
  84              		@ args = 4, pretend = 0, frame = 32
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86 0000 80B5     		push	{r7, lr}
  87              	.LCFI3:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 88B0     		sub	sp, sp, #32
  92              	.LCFI4:
  93              		.cfi_def_cfa_offset 40
  94 0004 00AF     		add	r7, sp, #0
  95              	.LCFI5:
  96              		.cfi_def_cfa_register 7
  97 0006 F860     		str	r0, [r7, #12]
  98 0008 B960     		str	r1, [r7, #8]
  99 000a 7A60     		str	r2, [r7, #4]
 100 000c 3B60     		str	r3, [r7, #0]
  18:../src/led/led.c **** 	clearLed(led);
 101              		.loc 1 18 0
 102 000e F868     		ldr	r0, [r7, #12]
 103 0010 FFF7FEFF 		bl	clearLed
  19:../src/led/led.c **** 	int maxPower = getMax(bluePower, getMax(greenPower, redPower));
 104              		.loc 1 19 0
 105 0014 B868     		ldr	r0, [r7, #8]
 106 0016 3968     		ldr	r1, [r7, #0]
 107 0018 FFF7FEFF 		bl	getMax
 108 001c 0346     		mov	r3, r0
 109 001e 7868     		ldr	r0, [r7, #4]
 110 0020 1946     		mov	r1, r3
 111 0022 FFF7FEFF 		bl	getMax
 112 0026 3861     		str	r0, [r7, #16]
  20:../src/led/led.c **** 	int delay = timeout / maxPower;
 113              		.loc 1 20 0
 114 0028 BA6A     		ldr	r2, [r7, #40]
 115 002a 3B69     		ldr	r3, [r7, #16]
 116 002c 92FBF3F3 		sdiv	r3, r2, r3
 117 0030 FB61     		str	r3, [r7, #28]
  21:../src/led/led.c **** 	if (delay == 0) {
 118              		.loc 1 21 0
 119 0032 FB69     		ldr	r3, [r7, #28]
 120 0034 002B     		cmp	r3, #0
 121 0036 02D1     		bne	.L3
  22:../src/led/led.c **** 		delay = 1;
 122              		.loc 1 22 0
 123 0038 4FF00103 		mov	r3, #1
 124 003c FB61     		str	r3, [r7, #28]
 125              	.L3:
 126              	.LBB2:
  23:../src/led/led.c **** 	}
  24:../src/led/led.c **** 	for (int ledPower = 0; ledPower < maxPower; ledPower++) {
 127              		.loc 1 24 0
 128 003e 4FF00003 		mov	r3, #0
 129 0042 BB61     		str	r3, [r7, #24]
 130 0044 1EE0     		b	.L4
 131              	.L8:
  25:../src/led/led.c **** 		if (bluePower > ledPower) {
 132              		.loc 1 25 0
 133 0046 7A68     		ldr	r2, [r7, #4]
 134 0048 BB69     		ldr	r3, [r7, #24]
 135 004a 9A42     		cmp	r2, r3
 136 004c 03DD     		ble	.L5
  26:../src/led/led.c **** 			led->LED_BLUE = ledPower;
 137              		.loc 1 26 0
 138 004e BB69     		ldr	r3, [r7, #24]
 139 0050 9AB2     		uxth	r2, r3
 140 0052 FB68     		ldr	r3, [r7, #12]
 141 0054 9A86     		strh	r2, [r3, #52]	@ movhi
 142              	.L5:
  27:../src/led/led.c **** 		}
  28:../src/led/led.c **** 		if (greenPower > ledPower) {
 143              		.loc 1 28 0
 144 0056 BA68     		ldr	r2, [r7, #8]
 145 0058 BB69     		ldr	r3, [r7, #24]
 146 005a 9A42     		cmp	r2, r3
 147 005c 03DD     		ble	.L6
  29:../src/led/led.c **** 			led->LED_GREEN = ledPower;
 148              		.loc 1 29 0
 149 005e BB69     		ldr	r3, [r7, #24]
 150 0060 9AB2     		uxth	r2, r3
 151 0062 FB68     		ldr	r3, [r7, #12]
 152 0064 1A87     		strh	r2, [r3, #56]	@ movhi
 153              	.L6:
  30:../src/led/led.c **** 		}
  31:../src/led/led.c **** 		if (redPower > ledPower) {
 154              		.loc 1 31 0
 155 0066 3A68     		ldr	r2, [r7, #0]
 156 0068 BB69     		ldr	r3, [r7, #24]
 157 006a 9A42     		cmp	r2, r3
 158 006c 03DD     		ble	.L7
  32:../src/led/led.c **** 			led->LED_RED = ledPower;
 159              		.loc 1 32 0
 160 006e BB69     		ldr	r3, [r7, #24]
 161 0070 9AB2     		uxth	r2, r3
 162 0072 FB68     		ldr	r3, [r7, #12]
 163 0074 9A87     		strh	r2, [r3, #60]	@ movhi
 164              	.L7:
  33:../src/led/led.c **** 		}
  34:../src/led/led.c **** 		delayMs(delay);
 165              		.loc 1 34 0
 166 0076 F869     		ldr	r0, [r7, #28]
 167 0078 FFF7FEFF 		bl	delayMs
  24:../src/led/led.c **** 	for (int ledPower = 0; ledPower < maxPower; ledPower++) {
 168              		.loc 1 24 0
 169 007c BB69     		ldr	r3, [r7, #24]
 170 007e 03F10103 		add	r3, r3, #1
 171 0082 BB61     		str	r3, [r7, #24]
 172              	.L4:
  24:../src/led/led.c **** 	for (int ledPower = 0; ledPower < maxPower; ledPower++) {
 173              		.loc 1 24 0 is_stmt 0 discriminator 1
 174 0084 BA69     		ldr	r2, [r7, #24]
 175 0086 3B69     		ldr	r3, [r7, #16]
 176 0088 9A42     		cmp	r2, r3
 177 008a DCDB     		blt	.L8
 178              	.LBE2:
 179              	.LBB3:
  35:../src/led/led.c **** 	}
  36:../src/led/led.c **** 	for (int ledPower = maxPower; ledPower >=0; ledPower--) {
 180              		.loc 1 36 0 is_stmt 1
 181 008c 3B69     		ldr	r3, [r7, #16]
 182 008e 7B61     		str	r3, [r7, #20]
 183 0090 1EE0     		b	.L9
 184              	.L13:
  37:../src/led/led.c **** 		if (bluePower > ledPower) {
 185              		.loc 1 37 0
 186 0092 7A68     		ldr	r2, [r7, #4]
 187 0094 7B69     		ldr	r3, [r7, #20]
 188 0096 9A42     		cmp	r2, r3
 189 0098 03DD     		ble	.L10
  38:../src/led/led.c **** 			led->LED_BLUE = ledPower;
 190              		.loc 1 38 0
 191 009a 7B69     		ldr	r3, [r7, #20]
 192 009c 9AB2     		uxth	r2, r3
 193 009e FB68     		ldr	r3, [r7, #12]
 194 00a0 9A86     		strh	r2, [r3, #52]	@ movhi
 195              	.L10:
  39:../src/led/led.c **** 		}
  40:../src/led/led.c **** 		if (greenPower > ledPower) {
 196              		.loc 1 40 0
 197 00a2 BA68     		ldr	r2, [r7, #8]
 198 00a4 7B69     		ldr	r3, [r7, #20]
 199 00a6 9A42     		cmp	r2, r3
 200 00a8 03DD     		ble	.L11
  41:../src/led/led.c **** 			led->LED_GREEN = ledPower;
 201              		.loc 1 41 0
 202 00aa 7B69     		ldr	r3, [r7, #20]
 203 00ac 9AB2     		uxth	r2, r3
 204 00ae FB68     		ldr	r3, [r7, #12]
 205 00b0 1A87     		strh	r2, [r3, #56]	@ movhi
 206              	.L11:
  42:../src/led/led.c **** 		}
  43:../src/led/led.c **** 		if (redPower > ledPower) {
 207              		.loc 1 43 0
 208 00b2 3A68     		ldr	r2, [r7, #0]
 209 00b4 7B69     		ldr	r3, [r7, #20]
 210 00b6 9A42     		cmp	r2, r3
 211 00b8 03DD     		ble	.L12
  44:../src/led/led.c **** 			led->LED_RED = ledPower;
 212              		.loc 1 44 0
 213 00ba 7B69     		ldr	r3, [r7, #20]
 214 00bc 9AB2     		uxth	r2, r3
 215 00be FB68     		ldr	r3, [r7, #12]
 216 00c0 9A87     		strh	r2, [r3, #60]	@ movhi
 217              	.L12:
  45:../src/led/led.c **** 		}
  46:../src/led/led.c **** 		delayMs(delay);
 218              		.loc 1 46 0
 219 00c2 F869     		ldr	r0, [r7, #28]
 220 00c4 FFF7FEFF 		bl	delayMs
  36:../src/led/led.c **** 	for (int ledPower = maxPower; ledPower >=0; ledPower--) {
 221              		.loc 1 36 0
 222 00c8 7B69     		ldr	r3, [r7, #20]
 223 00ca 03F1FF33 		add	r3, r3, #-1
 224 00ce 7B61     		str	r3, [r7, #20]
 225              	.L9:
  36:../src/led/led.c **** 	for (int ledPower = maxPower; ledPower >=0; ledPower--) {
 226              		.loc 1 36 0 is_stmt 0 discriminator 1
 227 00d0 7B69     		ldr	r3, [r7, #20]
 228 00d2 002B     		cmp	r3, #0
 229 00d4 DDDA     		bge	.L13
 230              	.LBE3:
  47:../src/led/led.c **** 	}
  48:../src/led/led.c **** }
 231              		.loc 1 48 0 is_stmt 1
 232 00d6 07F12007 		add	r7, r7, #32
 233 00da BD46     		mov	sp, r7
 234 00dc 80BD     		pop	{r7, pc}
 235              		.cfi_endproc
 236              	.LFE30:
 238 00de 00BF     		.section	.text.clearLed,"ax",%progbits
 239              		.align	2
 240              		.global	clearLed
 241              		.thumb
 242              		.thumb_func
 244              	clearLed:
 245              	.LFB31:
  49:../src/led/led.c **** 
  50:../src/led/led.c **** void clearLed(TIM_TypeDef * led) {
 246              		.loc 1 50 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 8
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 251 0000 80B4     		push	{r7}
 252              	.LCFI6:
 253              		.cfi_def_cfa_offset 4
 254              		.cfi_offset 7, -4
 255 0002 83B0     		sub	sp, sp, #12
 256              	.LCFI7:
 257              		.cfi_def_cfa_offset 16
 258 0004 00AF     		add	r7, sp, #0
 259              	.LCFI8:
 260              		.cfi_def_cfa_register 7
 261 0006 7860     		str	r0, [r7, #4]
  51:../src/led/led.c **** 	led->LED_RED = 0;
 262              		.loc 1 51 0
 263 0008 7B68     		ldr	r3, [r7, #4]
 264 000a 4FF00002 		mov	r2, #0
 265 000e 9A87     		strh	r2, [r3, #60]	@ movhi
  52:../src/led/led.c **** 	led->LED_GREEN = 0;
 266              		.loc 1 52 0
 267 0010 7B68     		ldr	r3, [r7, #4]
 268 0012 4FF00002 		mov	r2, #0
 269 0016 1A87     		strh	r2, [r3, #56]	@ movhi
  53:../src/led/led.c **** 	led->LED_BLUE = 0;
 270              		.loc 1 53 0
 271 0018 7B68     		ldr	r3, [r7, #4]
 272 001a 4FF00002 		mov	r2, #0
 273 001e 9A86     		strh	r2, [r3, #52]	@ movhi
  54:../src/led/led.c **** }
 274              		.loc 1 54 0
 275 0020 07F10C07 		add	r7, r7, #12
 276 0024 BD46     		mov	sp, r7
 277 0026 80BC     		pop	{r7}
 278 0028 7047     		bx	lr
 279              		.cfi_endproc
 280              	.LFE31:
 282 002a 00BF     		.text
 283              	.Letext0:
 284              		.file 2 "d:\\programs\\stm programs\\codebench\\bin\\../lib/gcc/arm-none-eabi/4.7.3/../../../../ar
 285              		.file 3 "D:\\PROGRAMMING\\stm\\stm-discovery_test_project\\libs\\CMSIS/stm32f10x.h"
 286              		.file 4 "D:\\PROGRAMMING\\stm\\stm-discovery_test_project\\libs\\CMSIS/core_cm3.h"
 287              		.file 5 "../src/led/../common/common.h"
DEFINED SYMBOLS
                            *ABS*:00000000 led.c
                            *COM*:00000008 time_ms
                            *COM*:00000001 batteryPower
                            *COM*:00000001 isBattaryConnected
C:\Users\Oleksiy\AppData\Local\Temp\cchqYYqN.s:22     .text.switchLed:00000000 $t
C:\Users\Oleksiy\AppData\Local\Temp\cchqYYqN.s:27     .text.switchLed:00000000 switchLed
C:\Users\Oleksiy\AppData\Local\Temp\cchqYYqN.s:244    .text.clearLed:00000000 clearLed
C:\Users\Oleksiy\AppData\Local\Temp\cchqYYqN.s:75     .text.reswitchLed:00000000 $t
C:\Users\Oleksiy\AppData\Local\Temp\cchqYYqN.s:80     .text.reswitchLed:00000000 reswitchLed
C:\Users\Oleksiy\AppData\Local\Temp\cchqYYqN.s:239    .text.clearLed:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
getMax
delayMs
