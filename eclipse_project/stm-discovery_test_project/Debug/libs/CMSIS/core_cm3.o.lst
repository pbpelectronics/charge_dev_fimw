   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"core_cm3.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.__get_PSP,"ax",%progbits
  19              		.align	2
  20              		.global	__get_PSP
  21              		.thumb
  22              		.thumb_func
  24              	__get_PSP:
  25              	.LFB0:
  26              		.file 1 "../libs/CMSIS/core_cm3.c"
   1:../libs/CMSIS/core_cm3.c **** /**************************************************************************//**
   2:../libs/CMSIS/core_cm3.c ****  * @file     core_cm3.c
   3:../libs/CMSIS/core_cm3.c ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Source File
   4:../libs/CMSIS/core_cm3.c ****  * @version  V1.30
   5:../libs/CMSIS/core_cm3.c ****  * @date     30. October 2009
   6:../libs/CMSIS/core_cm3.c ****  *
   7:../libs/CMSIS/core_cm3.c ****  * @note
   8:../libs/CMSIS/core_cm3.c ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:../libs/CMSIS/core_cm3.c ****  *
  10:../libs/CMSIS/core_cm3.c ****  * @par
  11:../libs/CMSIS/core_cm3.c ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../libs/CMSIS/core_cm3.c ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../libs/CMSIS/core_cm3.c ****  * within development tools that are supporting such ARM based processors. 
  14:../libs/CMSIS/core_cm3.c ****  *
  15:../libs/CMSIS/core_cm3.c ****  * @par
  16:../libs/CMSIS/core_cm3.c ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../libs/CMSIS/core_cm3.c ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../libs/CMSIS/core_cm3.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../libs/CMSIS/core_cm3.c ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../libs/CMSIS/core_cm3.c ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../libs/CMSIS/core_cm3.c ****  *
  22:../libs/CMSIS/core_cm3.c ****  ******************************************************************************/
  23:../libs/CMSIS/core_cm3.c **** 
  24:../libs/CMSIS/core_cm3.c **** #include <stdint.h>
  25:../libs/CMSIS/core_cm3.c **** 
  26:../libs/CMSIS/core_cm3.c **** /* define compiler specific symbols */
  27:../libs/CMSIS/core_cm3.c **** #if defined ( __CC_ARM   )
  28:../libs/CMSIS/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  29:../libs/CMSIS/core_cm3.c ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  30:../libs/CMSIS/core_cm3.c **** 
  31:../libs/CMSIS/core_cm3.c **** #elif defined ( __ICCARM__ )
  32:../libs/CMSIS/core_cm3.c ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  33:../libs/CMSIS/core_cm3.c ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  34:../libs/CMSIS/core_cm3.c **** 
  35:../libs/CMSIS/core_cm3.c **** #elif defined   (  __GNUC__  )
  36:../libs/CMSIS/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  37:../libs/CMSIS/core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  38:../libs/CMSIS/core_cm3.c **** 
  39:../libs/CMSIS/core_cm3.c **** #elif defined   (  __TASKING__  )
  40:../libs/CMSIS/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  41:../libs/CMSIS/core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  42:../libs/CMSIS/core_cm3.c **** 
  43:../libs/CMSIS/core_cm3.c **** #endif
  44:../libs/CMSIS/core_cm3.c **** 
  45:../libs/CMSIS/core_cm3.c **** 
  46:../libs/CMSIS/core_cm3.c **** /* ###################  Compiler specific Intrinsics  ########################### */
  47:../libs/CMSIS/core_cm3.c **** 
  48:../libs/CMSIS/core_cm3.c **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
  49:../libs/CMSIS/core_cm3.c **** /* ARM armcc specific functions */
  50:../libs/CMSIS/core_cm3.c **** 
  51:../libs/CMSIS/core_cm3.c **** /**
  52:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Process Stack Pointer
  53:../libs/CMSIS/core_cm3.c ****  *
  54:../libs/CMSIS/core_cm3.c ****  * @return ProcessStackPointer
  55:../libs/CMSIS/core_cm3.c ****  *
  56:../libs/CMSIS/core_cm3.c ****  * Return the actual process stack pointer
  57:../libs/CMSIS/core_cm3.c ****  */
  58:../libs/CMSIS/core_cm3.c **** __ASM uint32_t __get_PSP(void)
  59:../libs/CMSIS/core_cm3.c **** {
  60:../libs/CMSIS/core_cm3.c ****   mrs r0, psp
  61:../libs/CMSIS/core_cm3.c ****   bx lr
  62:../libs/CMSIS/core_cm3.c **** }
  63:../libs/CMSIS/core_cm3.c **** 
  64:../libs/CMSIS/core_cm3.c **** /**
  65:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Process Stack Pointer
  66:../libs/CMSIS/core_cm3.c ****  *
  67:../libs/CMSIS/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
  68:../libs/CMSIS/core_cm3.c ****  *
  69:../libs/CMSIS/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
  70:../libs/CMSIS/core_cm3.c ****  * (process stack pointer) Cortex processor register
  71:../libs/CMSIS/core_cm3.c ****  */
  72:../libs/CMSIS/core_cm3.c **** __ASM void __set_PSP(uint32_t topOfProcStack)
  73:../libs/CMSIS/core_cm3.c **** {
  74:../libs/CMSIS/core_cm3.c ****   msr psp, r0
  75:../libs/CMSIS/core_cm3.c ****   bx lr
  76:../libs/CMSIS/core_cm3.c **** }
  77:../libs/CMSIS/core_cm3.c **** 
  78:../libs/CMSIS/core_cm3.c **** /**
  79:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Main Stack Pointer
  80:../libs/CMSIS/core_cm3.c ****  *
  81:../libs/CMSIS/core_cm3.c ****  * @return Main Stack Pointer
  82:../libs/CMSIS/core_cm3.c ****  *
  83:../libs/CMSIS/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
  84:../libs/CMSIS/core_cm3.c ****  * Cortex processor register
  85:../libs/CMSIS/core_cm3.c ****  */
  86:../libs/CMSIS/core_cm3.c **** __ASM uint32_t __get_MSP(void)
  87:../libs/CMSIS/core_cm3.c **** {
  88:../libs/CMSIS/core_cm3.c ****   mrs r0, msp
  89:../libs/CMSIS/core_cm3.c ****   bx lr
  90:../libs/CMSIS/core_cm3.c **** }
  91:../libs/CMSIS/core_cm3.c **** 
  92:../libs/CMSIS/core_cm3.c **** /**
  93:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Main Stack Pointer
  94:../libs/CMSIS/core_cm3.c ****  *
  95:../libs/CMSIS/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
  96:../libs/CMSIS/core_cm3.c ****  *
  97:../libs/CMSIS/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
  98:../libs/CMSIS/core_cm3.c ****  * (main stack pointer) Cortex processor register
  99:../libs/CMSIS/core_cm3.c ****  */
 100:../libs/CMSIS/core_cm3.c **** __ASM void __set_MSP(uint32_t mainStackPointer)
 101:../libs/CMSIS/core_cm3.c **** {
 102:../libs/CMSIS/core_cm3.c ****   msr msp, r0
 103:../libs/CMSIS/core_cm3.c ****   bx lr
 104:../libs/CMSIS/core_cm3.c **** }
 105:../libs/CMSIS/core_cm3.c **** 
 106:../libs/CMSIS/core_cm3.c **** /**
 107:../libs/CMSIS/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 108:../libs/CMSIS/core_cm3.c ****  *
 109:../libs/CMSIS/core_cm3.c ****  * @param   value  value to reverse
 110:../libs/CMSIS/core_cm3.c ****  * @return         reversed value
 111:../libs/CMSIS/core_cm3.c ****  *
 112:../libs/CMSIS/core_cm3.c ****  * Reverse byte order in unsigned short value
 113:../libs/CMSIS/core_cm3.c ****  */
 114:../libs/CMSIS/core_cm3.c **** __ASM uint32_t __REV16(uint16_t value)
 115:../libs/CMSIS/core_cm3.c **** {
 116:../libs/CMSIS/core_cm3.c ****   rev16 r0, r0
 117:../libs/CMSIS/core_cm3.c ****   bx lr
 118:../libs/CMSIS/core_cm3.c **** }
 119:../libs/CMSIS/core_cm3.c **** 
 120:../libs/CMSIS/core_cm3.c **** /**
 121:../libs/CMSIS/core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 122:../libs/CMSIS/core_cm3.c ****  *
 123:../libs/CMSIS/core_cm3.c ****  * @param   value  value to reverse
 124:../libs/CMSIS/core_cm3.c ****  * @return         reversed value
 125:../libs/CMSIS/core_cm3.c ****  *
 126:../libs/CMSIS/core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 127:../libs/CMSIS/core_cm3.c ****  */
 128:../libs/CMSIS/core_cm3.c **** __ASM int32_t __REVSH(int16_t value)
 129:../libs/CMSIS/core_cm3.c **** {
 130:../libs/CMSIS/core_cm3.c ****   revsh r0, r0
 131:../libs/CMSIS/core_cm3.c ****   bx lr
 132:../libs/CMSIS/core_cm3.c **** }
 133:../libs/CMSIS/core_cm3.c **** 
 134:../libs/CMSIS/core_cm3.c **** 
 135:../libs/CMSIS/core_cm3.c **** #if (__ARMCC_VERSION < 400000)
 136:../libs/CMSIS/core_cm3.c **** 
 137:../libs/CMSIS/core_cm3.c **** /**
 138:../libs/CMSIS/core_cm3.c ****  * @brief  Remove the exclusive lock created by ldrex
 139:../libs/CMSIS/core_cm3.c ****  *
 140:../libs/CMSIS/core_cm3.c ****  * Removes the exclusive lock which is created by ldrex.
 141:../libs/CMSIS/core_cm3.c ****  */
 142:../libs/CMSIS/core_cm3.c **** __ASM void __CLREX(void)
 143:../libs/CMSIS/core_cm3.c **** {
 144:../libs/CMSIS/core_cm3.c ****   clrex
 145:../libs/CMSIS/core_cm3.c **** }
 146:../libs/CMSIS/core_cm3.c **** 
 147:../libs/CMSIS/core_cm3.c **** /**
 148:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Base Priority value
 149:../libs/CMSIS/core_cm3.c ****  *
 150:../libs/CMSIS/core_cm3.c ****  * @return BasePriority
 151:../libs/CMSIS/core_cm3.c ****  *
 152:../libs/CMSIS/core_cm3.c ****  * Return the content of the base priority register
 153:../libs/CMSIS/core_cm3.c ****  */
 154:../libs/CMSIS/core_cm3.c **** __ASM uint32_t  __get_BASEPRI(void)
 155:../libs/CMSIS/core_cm3.c **** {
 156:../libs/CMSIS/core_cm3.c ****   mrs r0, basepri
 157:../libs/CMSIS/core_cm3.c ****   bx lr
 158:../libs/CMSIS/core_cm3.c **** }
 159:../libs/CMSIS/core_cm3.c **** 
 160:../libs/CMSIS/core_cm3.c **** /**
 161:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Base Priority value
 162:../libs/CMSIS/core_cm3.c ****  *
 163:../libs/CMSIS/core_cm3.c ****  * @param  basePri  BasePriority
 164:../libs/CMSIS/core_cm3.c ****  *
 165:../libs/CMSIS/core_cm3.c ****  * Set the base priority register
 166:../libs/CMSIS/core_cm3.c ****  */
 167:../libs/CMSIS/core_cm3.c **** __ASM void __set_BASEPRI(uint32_t basePri)
 168:../libs/CMSIS/core_cm3.c **** {
 169:../libs/CMSIS/core_cm3.c ****   msr basepri, r0
 170:../libs/CMSIS/core_cm3.c ****   bx lr
 171:../libs/CMSIS/core_cm3.c **** }
 172:../libs/CMSIS/core_cm3.c **** 
 173:../libs/CMSIS/core_cm3.c **** /**
 174:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Priority Mask value
 175:../libs/CMSIS/core_cm3.c ****  *
 176:../libs/CMSIS/core_cm3.c ****  * @return PriMask
 177:../libs/CMSIS/core_cm3.c ****  *
 178:../libs/CMSIS/core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 179:../libs/CMSIS/core_cm3.c ****  */
 180:../libs/CMSIS/core_cm3.c **** __ASM uint32_t __get_PRIMASK(void)
 181:../libs/CMSIS/core_cm3.c **** {
 182:../libs/CMSIS/core_cm3.c ****   mrs r0, primask
 183:../libs/CMSIS/core_cm3.c ****   bx lr
 184:../libs/CMSIS/core_cm3.c **** }
 185:../libs/CMSIS/core_cm3.c **** 
 186:../libs/CMSIS/core_cm3.c **** /**
 187:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Priority Mask value
 188:../libs/CMSIS/core_cm3.c ****  *
 189:../libs/CMSIS/core_cm3.c ****  * @param  priMask  PriMask
 190:../libs/CMSIS/core_cm3.c ****  *
 191:../libs/CMSIS/core_cm3.c ****  * Set the priority mask bit in the priority mask register
 192:../libs/CMSIS/core_cm3.c ****  */
 193:../libs/CMSIS/core_cm3.c **** __ASM void __set_PRIMASK(uint32_t priMask)
 194:../libs/CMSIS/core_cm3.c **** {
 195:../libs/CMSIS/core_cm3.c ****   msr primask, r0
 196:../libs/CMSIS/core_cm3.c ****   bx lr
 197:../libs/CMSIS/core_cm3.c **** }
 198:../libs/CMSIS/core_cm3.c **** 
 199:../libs/CMSIS/core_cm3.c **** /**
 200:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Fault Mask value
 201:../libs/CMSIS/core_cm3.c ****  *
 202:../libs/CMSIS/core_cm3.c ****  * @return FaultMask
 203:../libs/CMSIS/core_cm3.c ****  *
 204:../libs/CMSIS/core_cm3.c ****  * Return the content of the fault mask register
 205:../libs/CMSIS/core_cm3.c ****  */
 206:../libs/CMSIS/core_cm3.c **** __ASM uint32_t  __get_FAULTMASK(void)
 207:../libs/CMSIS/core_cm3.c **** {
 208:../libs/CMSIS/core_cm3.c ****   mrs r0, faultmask
 209:../libs/CMSIS/core_cm3.c ****   bx lr
 210:../libs/CMSIS/core_cm3.c **** }
 211:../libs/CMSIS/core_cm3.c **** 
 212:../libs/CMSIS/core_cm3.c **** /**
 213:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Fault Mask value
 214:../libs/CMSIS/core_cm3.c ****  *
 215:../libs/CMSIS/core_cm3.c ****  * @param  faultMask  faultMask value
 216:../libs/CMSIS/core_cm3.c ****  *
 217:../libs/CMSIS/core_cm3.c ****  * Set the fault mask register
 218:../libs/CMSIS/core_cm3.c ****  */
 219:../libs/CMSIS/core_cm3.c **** __ASM void __set_FAULTMASK(uint32_t faultMask)
 220:../libs/CMSIS/core_cm3.c **** {
 221:../libs/CMSIS/core_cm3.c ****   msr faultmask, r0
 222:../libs/CMSIS/core_cm3.c ****   bx lr
 223:../libs/CMSIS/core_cm3.c **** }
 224:../libs/CMSIS/core_cm3.c **** 
 225:../libs/CMSIS/core_cm3.c **** /**
 226:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Control Register value
 227:../libs/CMSIS/core_cm3.c ****  * 
 228:../libs/CMSIS/core_cm3.c ****  * @return Control value
 229:../libs/CMSIS/core_cm3.c ****  *
 230:../libs/CMSIS/core_cm3.c ****  * Return the content of the control register
 231:../libs/CMSIS/core_cm3.c ****  */
 232:../libs/CMSIS/core_cm3.c **** __ASM uint32_t __get_CONTROL(void)
 233:../libs/CMSIS/core_cm3.c **** {
 234:../libs/CMSIS/core_cm3.c ****   mrs r0, control
 235:../libs/CMSIS/core_cm3.c ****   bx lr
 236:../libs/CMSIS/core_cm3.c **** }
 237:../libs/CMSIS/core_cm3.c **** 
 238:../libs/CMSIS/core_cm3.c **** /**
 239:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Control Register value
 240:../libs/CMSIS/core_cm3.c ****  *
 241:../libs/CMSIS/core_cm3.c ****  * @param  control  Control value
 242:../libs/CMSIS/core_cm3.c ****  *
 243:../libs/CMSIS/core_cm3.c ****  * Set the control register
 244:../libs/CMSIS/core_cm3.c ****  */
 245:../libs/CMSIS/core_cm3.c **** __ASM void __set_CONTROL(uint32_t control)
 246:../libs/CMSIS/core_cm3.c **** {
 247:../libs/CMSIS/core_cm3.c ****   msr control, r0
 248:../libs/CMSIS/core_cm3.c ****   bx lr
 249:../libs/CMSIS/core_cm3.c **** }
 250:../libs/CMSIS/core_cm3.c **** 
 251:../libs/CMSIS/core_cm3.c **** #endif /* __ARMCC_VERSION  */ 
 252:../libs/CMSIS/core_cm3.c **** 
 253:../libs/CMSIS/core_cm3.c **** 
 254:../libs/CMSIS/core_cm3.c **** 
 255:../libs/CMSIS/core_cm3.c **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 256:../libs/CMSIS/core_cm3.c **** /* IAR iccarm specific functions */
 257:../libs/CMSIS/core_cm3.c **** #pragma diag_suppress=Pe940
 258:../libs/CMSIS/core_cm3.c **** 
 259:../libs/CMSIS/core_cm3.c **** /**
 260:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Process Stack Pointer
 261:../libs/CMSIS/core_cm3.c ****  *
 262:../libs/CMSIS/core_cm3.c ****  * @return ProcessStackPointer
 263:../libs/CMSIS/core_cm3.c ****  *
 264:../libs/CMSIS/core_cm3.c ****  * Return the actual process stack pointer
 265:../libs/CMSIS/core_cm3.c ****  */
 266:../libs/CMSIS/core_cm3.c **** uint32_t __get_PSP(void)
 267:../libs/CMSIS/core_cm3.c **** {
 268:../libs/CMSIS/core_cm3.c ****   __ASM("mrs r0, psp");
 269:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 270:../libs/CMSIS/core_cm3.c **** }
 271:../libs/CMSIS/core_cm3.c **** 
 272:../libs/CMSIS/core_cm3.c **** /**
 273:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Process Stack Pointer
 274:../libs/CMSIS/core_cm3.c ****  *
 275:../libs/CMSIS/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 276:../libs/CMSIS/core_cm3.c ****  *
 277:../libs/CMSIS/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 278:../libs/CMSIS/core_cm3.c ****  * (process stack pointer) Cortex processor register
 279:../libs/CMSIS/core_cm3.c ****  */
 280:../libs/CMSIS/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 281:../libs/CMSIS/core_cm3.c **** {
 282:../libs/CMSIS/core_cm3.c ****   __ASM("msr psp, r0");
 283:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 284:../libs/CMSIS/core_cm3.c **** }
 285:../libs/CMSIS/core_cm3.c **** 
 286:../libs/CMSIS/core_cm3.c **** /**
 287:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Main Stack Pointer
 288:../libs/CMSIS/core_cm3.c ****  *
 289:../libs/CMSIS/core_cm3.c ****  * @return Main Stack Pointer
 290:../libs/CMSIS/core_cm3.c ****  *
 291:../libs/CMSIS/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 292:../libs/CMSIS/core_cm3.c ****  * Cortex processor register
 293:../libs/CMSIS/core_cm3.c ****  */
 294:../libs/CMSIS/core_cm3.c **** uint32_t __get_MSP(void)
 295:../libs/CMSIS/core_cm3.c **** {
 296:../libs/CMSIS/core_cm3.c ****   __ASM("mrs r0, msp");
 297:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 298:../libs/CMSIS/core_cm3.c **** }
 299:../libs/CMSIS/core_cm3.c **** 
 300:../libs/CMSIS/core_cm3.c **** /**
 301:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Main Stack Pointer
 302:../libs/CMSIS/core_cm3.c ****  *
 303:../libs/CMSIS/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 304:../libs/CMSIS/core_cm3.c ****  *
 305:../libs/CMSIS/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 306:../libs/CMSIS/core_cm3.c ****  * (main stack pointer) Cortex processor register
 307:../libs/CMSIS/core_cm3.c ****  */
 308:../libs/CMSIS/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 309:../libs/CMSIS/core_cm3.c **** {
 310:../libs/CMSIS/core_cm3.c ****   __ASM("msr msp, r0");
 311:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 312:../libs/CMSIS/core_cm3.c **** }
 313:../libs/CMSIS/core_cm3.c **** 
 314:../libs/CMSIS/core_cm3.c **** /**
 315:../libs/CMSIS/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 316:../libs/CMSIS/core_cm3.c ****  *
 317:../libs/CMSIS/core_cm3.c ****  * @param  value  value to reverse
 318:../libs/CMSIS/core_cm3.c ****  * @return        reversed value
 319:../libs/CMSIS/core_cm3.c ****  *
 320:../libs/CMSIS/core_cm3.c ****  * Reverse byte order in unsigned short value
 321:../libs/CMSIS/core_cm3.c ****  */
 322:../libs/CMSIS/core_cm3.c **** uint32_t __REV16(uint16_t value)
 323:../libs/CMSIS/core_cm3.c **** {
 324:../libs/CMSIS/core_cm3.c ****   __ASM("rev16 r0, r0");
 325:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 326:../libs/CMSIS/core_cm3.c **** }
 327:../libs/CMSIS/core_cm3.c **** 
 328:../libs/CMSIS/core_cm3.c **** /**
 329:../libs/CMSIS/core_cm3.c ****  * @brief  Reverse bit order of value
 330:../libs/CMSIS/core_cm3.c ****  *
 331:../libs/CMSIS/core_cm3.c ****  * @param  value  value to reverse
 332:../libs/CMSIS/core_cm3.c ****  * @return        reversed value
 333:../libs/CMSIS/core_cm3.c ****  *
 334:../libs/CMSIS/core_cm3.c ****  * Reverse bit order of value
 335:../libs/CMSIS/core_cm3.c ****  */
 336:../libs/CMSIS/core_cm3.c **** uint32_t __RBIT(uint32_t value)
 337:../libs/CMSIS/core_cm3.c **** {
 338:../libs/CMSIS/core_cm3.c ****   __ASM("rbit r0, r0");
 339:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 340:../libs/CMSIS/core_cm3.c **** }
 341:../libs/CMSIS/core_cm3.c **** 
 342:../libs/CMSIS/core_cm3.c **** /**
 343:../libs/CMSIS/core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 344:../libs/CMSIS/core_cm3.c ****  *
 345:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 346:../libs/CMSIS/core_cm3.c ****  * @return        value of (*address)
 347:../libs/CMSIS/core_cm3.c ****  *
 348:../libs/CMSIS/core_cm3.c ****  * Exclusive LDR command for 8 bit values)
 349:../libs/CMSIS/core_cm3.c ****  */
 350:../libs/CMSIS/core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 351:../libs/CMSIS/core_cm3.c **** {
 352:../libs/CMSIS/core_cm3.c ****   __ASM("ldrexb r0, [r0]");
 353:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr"); 
 354:../libs/CMSIS/core_cm3.c **** }
 355:../libs/CMSIS/core_cm3.c **** 
 356:../libs/CMSIS/core_cm3.c **** /**
 357:../libs/CMSIS/core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 358:../libs/CMSIS/core_cm3.c ****  *
 359:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 360:../libs/CMSIS/core_cm3.c ****  * @return        value of (*address)
 361:../libs/CMSIS/core_cm3.c ****  *
 362:../libs/CMSIS/core_cm3.c ****  * Exclusive LDR command for 16 bit values
 363:../libs/CMSIS/core_cm3.c ****  */
 364:../libs/CMSIS/core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 365:../libs/CMSIS/core_cm3.c **** {
 366:../libs/CMSIS/core_cm3.c ****   __ASM("ldrexh r0, [r0]");
 367:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 368:../libs/CMSIS/core_cm3.c **** }
 369:../libs/CMSIS/core_cm3.c **** 
 370:../libs/CMSIS/core_cm3.c **** /**
 371:../libs/CMSIS/core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 372:../libs/CMSIS/core_cm3.c ****  *
 373:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 374:../libs/CMSIS/core_cm3.c ****  * @return        value of (*address)
 375:../libs/CMSIS/core_cm3.c ****  *
 376:../libs/CMSIS/core_cm3.c ****  * Exclusive LDR command for 32 bit values
 377:../libs/CMSIS/core_cm3.c ****  */
 378:../libs/CMSIS/core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 379:../libs/CMSIS/core_cm3.c **** {
 380:../libs/CMSIS/core_cm3.c ****   __ASM("ldrex r0, [r0]");
 381:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 382:../libs/CMSIS/core_cm3.c **** }
 383:../libs/CMSIS/core_cm3.c **** 
 384:../libs/CMSIS/core_cm3.c **** /**
 385:../libs/CMSIS/core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 386:../libs/CMSIS/core_cm3.c ****  *
 387:../libs/CMSIS/core_cm3.c ****  * @param  value  value to store
 388:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 389:../libs/CMSIS/core_cm3.c ****  * @return        successful / failed
 390:../libs/CMSIS/core_cm3.c ****  *
 391:../libs/CMSIS/core_cm3.c ****  * Exclusive STR command for 8 bit values
 392:../libs/CMSIS/core_cm3.c ****  */
 393:../libs/CMSIS/core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 394:../libs/CMSIS/core_cm3.c **** {
 395:../libs/CMSIS/core_cm3.c ****   __ASM("strexb r0, r0, [r1]");
 396:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 397:../libs/CMSIS/core_cm3.c **** }
 398:../libs/CMSIS/core_cm3.c **** 
 399:../libs/CMSIS/core_cm3.c **** /**
 400:../libs/CMSIS/core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 401:../libs/CMSIS/core_cm3.c ****  *
 402:../libs/CMSIS/core_cm3.c ****  * @param  value  value to store
 403:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 404:../libs/CMSIS/core_cm3.c ****  * @return        successful / failed
 405:../libs/CMSIS/core_cm3.c ****  *
 406:../libs/CMSIS/core_cm3.c ****  * Exclusive STR command for 16 bit values
 407:../libs/CMSIS/core_cm3.c ****  */
 408:../libs/CMSIS/core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 409:../libs/CMSIS/core_cm3.c **** {
 410:../libs/CMSIS/core_cm3.c ****   __ASM("strexh r0, r0, [r1]");
 411:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 412:../libs/CMSIS/core_cm3.c **** }
 413:../libs/CMSIS/core_cm3.c **** 
 414:../libs/CMSIS/core_cm3.c **** /**
 415:../libs/CMSIS/core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 416:../libs/CMSIS/core_cm3.c ****  *
 417:../libs/CMSIS/core_cm3.c ****  * @param  value  value to store
 418:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 419:../libs/CMSIS/core_cm3.c ****  * @return        successful / failed
 420:../libs/CMSIS/core_cm3.c ****  *
 421:../libs/CMSIS/core_cm3.c ****  * Exclusive STR command for 32 bit values
 422:../libs/CMSIS/core_cm3.c ****  */
 423:../libs/CMSIS/core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 424:../libs/CMSIS/core_cm3.c **** {
 425:../libs/CMSIS/core_cm3.c ****   __ASM("strex r0, r0, [r1]");
 426:../libs/CMSIS/core_cm3.c ****   __ASM("bx lr");
 427:../libs/CMSIS/core_cm3.c **** }
 428:../libs/CMSIS/core_cm3.c **** 
 429:../libs/CMSIS/core_cm3.c **** #pragma diag_default=Pe940
 430:../libs/CMSIS/core_cm3.c **** 
 431:../libs/CMSIS/core_cm3.c **** 
 432:../libs/CMSIS/core_cm3.c **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 433:../libs/CMSIS/core_cm3.c **** /* GNU gcc specific functions */
 434:../libs/CMSIS/core_cm3.c **** 
 435:../libs/CMSIS/core_cm3.c **** /**
 436:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Process Stack Pointer
 437:../libs/CMSIS/core_cm3.c ****  *
 438:../libs/CMSIS/core_cm3.c ****  * @return ProcessStackPointer
 439:../libs/CMSIS/core_cm3.c ****  *
 440:../libs/CMSIS/core_cm3.c ****  * Return the actual process stack pointer
 441:../libs/CMSIS/core_cm3.c ****  */
 442:../libs/CMSIS/core_cm3.c **** uint32_t __get_PSP(void) __attribute__( ( naked ) );
 443:../libs/CMSIS/core_cm3.c **** uint32_t __get_PSP(void)
 444:../libs/CMSIS/core_cm3.c **** {
  27              		.loc 1 444 0
  28              		.cfi_startproc
  29              		@ Naked Function: prologue and epilogue provided by programmer.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
 445:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
  32              		.loc 1 445 0
  33 0000 4FF00004 		mov	r4, #0
 446:../libs/CMSIS/core_cm3.c **** 
 447:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MRS %0, psp\n\t" 
  34              		.loc 1 447 0
  35              	@ 447 "../libs/CMSIS/core_cm3.c" 1
  36 0004 EFF30984 		MRS r4, psp
  37 0008 2046     		MOV r0, r4 
  38 000a 7047     		BX  lr     
  39              		
  40              	@ 0 "" 2
 448:../libs/CMSIS/core_cm3.c ****                   "MOV r0, %0 \n\t"
 449:../libs/CMSIS/core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 450:../libs/CMSIS/core_cm3.c ****   return(result);
  41              		.loc 1 450 0
  42              		.thumb
  43 000c 2346     		mov	r3, r4
 451:../libs/CMSIS/core_cm3.c **** }
  44              		.loc 1 451 0
  45 000e 1846     		mov	r0, r3
  46              		.cfi_endproc
  47              	.LFE0:
  49              		.section	.text.__set_PSP,"ax",%progbits
  50              		.align	2
  51              		.global	__set_PSP
  52              		.thumb
  53              		.thumb_func
  55              	__set_PSP:
  56              	.LFB1:
 452:../libs/CMSIS/core_cm3.c **** 
 453:../libs/CMSIS/core_cm3.c **** /**
 454:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Process Stack Pointer
 455:../libs/CMSIS/core_cm3.c ****  *
 456:../libs/CMSIS/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 457:../libs/CMSIS/core_cm3.c ****  *
 458:../libs/CMSIS/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 459:../libs/CMSIS/core_cm3.c ****  * (process stack pointer) Cortex processor register
 460:../libs/CMSIS/core_cm3.c ****  */
 461:../libs/CMSIS/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
 462:../libs/CMSIS/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 463:../libs/CMSIS/core_cm3.c **** {
  57              		.loc 1 463 0
  58              		.cfi_startproc
  59              		@ Naked Function: prologue and epilogue provided by programmer.
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62 0000 0346     		mov	r3, r0
 464:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MSR psp, %0\n\t"
  63              		.loc 1 464 0
  64              	@ 464 "../libs/CMSIS/core_cm3.c" 1
  65 0002 83F30988 		MSR psp, r3
  66 0006 7047     		BX  lr     
  67              		
  68              	@ 0 "" 2
 465:../libs/CMSIS/core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfProcStack) );
 466:../libs/CMSIS/core_cm3.c **** }
  69              		.loc 1 466 0
  70              		.thumb
  71              		.cfi_endproc
  72              	.LFE1:
  74              		.section	.text.__get_MSP,"ax",%progbits
  75              		.align	2
  76              		.global	__get_MSP
  77              		.thumb
  78              		.thumb_func
  80              	__get_MSP:
  81              	.LFB2:
 467:../libs/CMSIS/core_cm3.c **** 
 468:../libs/CMSIS/core_cm3.c **** /**
 469:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Main Stack Pointer
 470:../libs/CMSIS/core_cm3.c ****  *
 471:../libs/CMSIS/core_cm3.c ****  * @return Main Stack Pointer
 472:../libs/CMSIS/core_cm3.c ****  *
 473:../libs/CMSIS/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 474:../libs/CMSIS/core_cm3.c ****  * Cortex processor register
 475:../libs/CMSIS/core_cm3.c ****  */
 476:../libs/CMSIS/core_cm3.c **** uint32_t __get_MSP(void) __attribute__( ( naked ) );
 477:../libs/CMSIS/core_cm3.c **** uint32_t __get_MSP(void)
 478:../libs/CMSIS/core_cm3.c **** {
  82              		.loc 1 478 0
  83              		.cfi_startproc
  84              		@ Naked Function: prologue and epilogue provided by programmer.
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 1, uses_anonymous_args = 0
 479:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
  87              		.loc 1 479 0
  88 0000 4FF00004 		mov	r4, #0
 480:../libs/CMSIS/core_cm3.c **** 
 481:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MRS %0, msp\n\t" 
  89              		.loc 1 481 0
  90              	@ 481 "../libs/CMSIS/core_cm3.c" 1
  91 0004 EFF30884 		MRS r4, msp
  92 0008 2046     		MOV r0, r4 
  93 000a 7047     		BX  lr     
  94              		
  95              	@ 0 "" 2
 482:../libs/CMSIS/core_cm3.c ****                   "MOV r0, %0 \n\t"
 483:../libs/CMSIS/core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 484:../libs/CMSIS/core_cm3.c ****   return(result);
  96              		.loc 1 484 0
  97              		.thumb
  98 000c 2346     		mov	r3, r4
 485:../libs/CMSIS/core_cm3.c **** }
  99              		.loc 1 485 0
 100 000e 1846     		mov	r0, r3
 101              		.cfi_endproc
 102              	.LFE2:
 104              		.section	.text.__set_MSP,"ax",%progbits
 105              		.align	2
 106              		.global	__set_MSP
 107              		.thumb
 108              		.thumb_func
 110              	__set_MSP:
 111              	.LFB3:
 486:../libs/CMSIS/core_cm3.c **** 
 487:../libs/CMSIS/core_cm3.c **** /**
 488:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Main Stack Pointer
 489:../libs/CMSIS/core_cm3.c ****  *
 490:../libs/CMSIS/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 491:../libs/CMSIS/core_cm3.c ****  *
 492:../libs/CMSIS/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 493:../libs/CMSIS/core_cm3.c ****  * (main stack pointer) Cortex processor register
 494:../libs/CMSIS/core_cm3.c ****  */
 495:../libs/CMSIS/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
 496:../libs/CMSIS/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 497:../libs/CMSIS/core_cm3.c **** {
 112              		.loc 1 497 0
 113              		.cfi_startproc
 114              		@ Naked Function: prologue and epilogue provided by programmer.
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117 0000 0346     		mov	r3, r0
 498:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MSR msp, %0\n\t"
 118              		.loc 1 498 0
 119              	@ 498 "../libs/CMSIS/core_cm3.c" 1
 120 0002 83F30888 		MSR msp, r3
 121 0006 7047     		BX  lr     
 122              		
 123              	@ 0 "" 2
 499:../libs/CMSIS/core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfMainStack) );
 500:../libs/CMSIS/core_cm3.c **** }
 124              		.loc 1 500 0
 125              		.thumb
 126              		.cfi_endproc
 127              	.LFE3:
 129              		.section	.text.__get_BASEPRI,"ax",%progbits
 130              		.align	2
 131              		.global	__get_BASEPRI
 132              		.thumb
 133              		.thumb_func
 135              	__get_BASEPRI:
 136              	.LFB4:
 501:../libs/CMSIS/core_cm3.c **** 
 502:../libs/CMSIS/core_cm3.c **** /**
 503:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Base Priority value
 504:../libs/CMSIS/core_cm3.c ****  *
 505:../libs/CMSIS/core_cm3.c ****  * @return BasePriority
 506:../libs/CMSIS/core_cm3.c ****  *
 507:../libs/CMSIS/core_cm3.c ****  * Return the content of the base priority register
 508:../libs/CMSIS/core_cm3.c ****  */
 509:../libs/CMSIS/core_cm3.c **** uint32_t __get_BASEPRI(void)
 510:../libs/CMSIS/core_cm3.c **** {
 137              		.loc 1 510 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 8
 140              		@ frame_needed = 1, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142 0000 90B4     		push	{r4, r7}
 143              	.LCFI0:
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 4, -8
 146              		.cfi_offset 7, -4
 147 0002 82B0     		sub	sp, sp, #8
 148              	.LCFI1:
 149              		.cfi_def_cfa_offset 16
 150 0004 00AF     		add	r7, sp, #0
 151              	.LCFI2:
 152              		.cfi_def_cfa_register 7
 511:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
 153              		.loc 1 511 0
 154 0006 4FF00003 		mov	r3, #0
 155 000a 7B60     		str	r3, [r7, #4]
 512:../libs/CMSIS/core_cm3.c ****   
 513:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 156              		.loc 1 513 0
 157              	@ 513 "../libs/CMSIS/core_cm3.c" 1
 158 000c EFF31284 		MRS r4, basepri_max
 159              	@ 0 "" 2
 160              		.thumb
 161 0010 7C60     		str	r4, [r7, #4]
 514:../libs/CMSIS/core_cm3.c ****   return(result);
 162              		.loc 1 514 0
 163 0012 7B68     		ldr	r3, [r7, #4]
 515:../libs/CMSIS/core_cm3.c **** }
 164              		.loc 1 515 0
 165 0014 1846     		mov	r0, r3
 166 0016 07F10807 		add	r7, r7, #8
 167 001a BD46     		mov	sp, r7
 168 001c 90BC     		pop	{r4, r7}
 169 001e 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE4:
 173              		.section	.text.__set_BASEPRI,"ax",%progbits
 174              		.align	2
 175              		.global	__set_BASEPRI
 176              		.thumb
 177              		.thumb_func
 179              	__set_BASEPRI:
 180              	.LFB5:
 516:../libs/CMSIS/core_cm3.c **** 
 517:../libs/CMSIS/core_cm3.c **** /**
 518:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Base Priority value
 519:../libs/CMSIS/core_cm3.c ****  *
 520:../libs/CMSIS/core_cm3.c ****  * @param  basePri  BasePriority
 521:../libs/CMSIS/core_cm3.c ****  *
 522:../libs/CMSIS/core_cm3.c ****  * Set the base priority register
 523:../libs/CMSIS/core_cm3.c ****  */
 524:../libs/CMSIS/core_cm3.c **** void __set_BASEPRI(uint32_t value)
 525:../libs/CMSIS/core_cm3.c **** {
 181              		.loc 1 525 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 8
 184              		@ frame_needed = 1, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 186 0000 80B4     		push	{r7}
 187              	.LCFI3:
 188              		.cfi_def_cfa_offset 4
 189              		.cfi_offset 7, -4
 190 0002 83B0     		sub	sp, sp, #12
 191              	.LCFI4:
 192              		.cfi_def_cfa_offset 16
 193 0004 00AF     		add	r7, sp, #0
 194              	.LCFI5:
 195              		.cfi_def_cfa_register 7
 196 0006 7860     		str	r0, [r7, #4]
 526:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 197              		.loc 1 526 0
 198 0008 7B68     		ldr	r3, [r7, #4]
 199              	@ 526 "../libs/CMSIS/core_cm3.c" 1
 200 000a 83F31188 		MSR basepri, r3
 201              	@ 0 "" 2
 527:../libs/CMSIS/core_cm3.c **** }
 202              		.loc 1 527 0
 203              		.thumb
 204 000e 07F10C07 		add	r7, r7, #12
 205 0012 BD46     		mov	sp, r7
 206 0014 80BC     		pop	{r7}
 207 0016 7047     		bx	lr
 208              		.cfi_endproc
 209              	.LFE5:
 211              		.section	.text.__get_PRIMASK,"ax",%progbits
 212              		.align	2
 213              		.global	__get_PRIMASK
 214              		.thumb
 215              		.thumb_func
 217              	__get_PRIMASK:
 218              	.LFB6:
 528:../libs/CMSIS/core_cm3.c **** 
 529:../libs/CMSIS/core_cm3.c **** /**
 530:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Priority Mask value
 531:../libs/CMSIS/core_cm3.c ****  *
 532:../libs/CMSIS/core_cm3.c ****  * @return PriMask
 533:../libs/CMSIS/core_cm3.c ****  *
 534:../libs/CMSIS/core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 535:../libs/CMSIS/core_cm3.c ****  */
 536:../libs/CMSIS/core_cm3.c **** uint32_t __get_PRIMASK(void)
 537:../libs/CMSIS/core_cm3.c **** {
 219              		.loc 1 537 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 8
 222              		@ frame_needed = 1, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 224 0000 90B4     		push	{r4, r7}
 225              	.LCFI6:
 226              		.cfi_def_cfa_offset 8
 227              		.cfi_offset 4, -8
 228              		.cfi_offset 7, -4
 229 0002 82B0     		sub	sp, sp, #8
 230              	.LCFI7:
 231              		.cfi_def_cfa_offset 16
 232 0004 00AF     		add	r7, sp, #0
 233              	.LCFI8:
 234              		.cfi_def_cfa_register 7
 538:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
 235              		.loc 1 538 0
 236 0006 4FF00003 		mov	r3, #0
 237 000a 7B60     		str	r3, [r7, #4]
 539:../libs/CMSIS/core_cm3.c **** 
 540:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 238              		.loc 1 540 0
 239              	@ 540 "../libs/CMSIS/core_cm3.c" 1
 240 000c EFF31084 		MRS r4, primask
 241              	@ 0 "" 2
 242              		.thumb
 243 0010 7C60     		str	r4, [r7, #4]
 541:../libs/CMSIS/core_cm3.c ****   return(result);
 244              		.loc 1 541 0
 245 0012 7B68     		ldr	r3, [r7, #4]
 542:../libs/CMSIS/core_cm3.c **** }
 246              		.loc 1 542 0
 247 0014 1846     		mov	r0, r3
 248 0016 07F10807 		add	r7, r7, #8
 249 001a BD46     		mov	sp, r7
 250 001c 90BC     		pop	{r4, r7}
 251 001e 7047     		bx	lr
 252              		.cfi_endproc
 253              	.LFE6:
 255              		.section	.text.__set_PRIMASK,"ax",%progbits
 256              		.align	2
 257              		.global	__set_PRIMASK
 258              		.thumb
 259              		.thumb_func
 261              	__set_PRIMASK:
 262              	.LFB7:
 543:../libs/CMSIS/core_cm3.c **** 
 544:../libs/CMSIS/core_cm3.c **** /**
 545:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Priority Mask value
 546:../libs/CMSIS/core_cm3.c ****  *
 547:../libs/CMSIS/core_cm3.c ****  * @param  priMask  PriMask
 548:../libs/CMSIS/core_cm3.c ****  *
 549:../libs/CMSIS/core_cm3.c ****  * Set the priority mask bit in the priority mask register
 550:../libs/CMSIS/core_cm3.c ****  */
 551:../libs/CMSIS/core_cm3.c **** void __set_PRIMASK(uint32_t priMask)
 552:../libs/CMSIS/core_cm3.c **** {
 263              		.loc 1 552 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 8
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 268 0000 80B4     		push	{r7}
 269              	.LCFI9:
 270              		.cfi_def_cfa_offset 4
 271              		.cfi_offset 7, -4
 272 0002 83B0     		sub	sp, sp, #12
 273              	.LCFI10:
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI11:
 277              		.cfi_def_cfa_register 7
 278 0006 7860     		str	r0, [r7, #4]
 553:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 279              		.loc 1 553 0
 280 0008 7B68     		ldr	r3, [r7, #4]
 281              	@ 553 "../libs/CMSIS/core_cm3.c" 1
 282 000a 83F31088 		MSR primask, r3
 283              	@ 0 "" 2
 554:../libs/CMSIS/core_cm3.c **** }
 284              		.loc 1 554 0
 285              		.thumb
 286 000e 07F10C07 		add	r7, r7, #12
 287 0012 BD46     		mov	sp, r7
 288 0014 80BC     		pop	{r7}
 289 0016 7047     		bx	lr
 290              		.cfi_endproc
 291              	.LFE7:
 293              		.section	.text.__get_FAULTMASK,"ax",%progbits
 294              		.align	2
 295              		.global	__get_FAULTMASK
 296              		.thumb
 297              		.thumb_func
 299              	__get_FAULTMASK:
 300              	.LFB8:
 555:../libs/CMSIS/core_cm3.c **** 
 556:../libs/CMSIS/core_cm3.c **** /**
 557:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Fault Mask value
 558:../libs/CMSIS/core_cm3.c ****  *
 559:../libs/CMSIS/core_cm3.c ****  * @return FaultMask
 560:../libs/CMSIS/core_cm3.c ****  *
 561:../libs/CMSIS/core_cm3.c ****  * Return the content of the fault mask register
 562:../libs/CMSIS/core_cm3.c ****  */
 563:../libs/CMSIS/core_cm3.c **** uint32_t __get_FAULTMASK(void)
 564:../libs/CMSIS/core_cm3.c **** {
 301              		.loc 1 564 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 8
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 306 0000 90B4     		push	{r4, r7}
 307              	.LCFI12:
 308              		.cfi_def_cfa_offset 8
 309              		.cfi_offset 4, -8
 310              		.cfi_offset 7, -4
 311 0002 82B0     		sub	sp, sp, #8
 312              	.LCFI13:
 313              		.cfi_def_cfa_offset 16
 314 0004 00AF     		add	r7, sp, #0
 315              	.LCFI14:
 316              		.cfi_def_cfa_register 7
 565:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
 317              		.loc 1 565 0
 318 0006 4FF00003 		mov	r3, #0
 319 000a 7B60     		str	r3, [r7, #4]
 566:../libs/CMSIS/core_cm3.c ****   
 567:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 320              		.loc 1 567 0
 321              	@ 567 "../libs/CMSIS/core_cm3.c" 1
 322 000c EFF31384 		MRS r4, faultmask
 323              	@ 0 "" 2
 324              		.thumb
 325 0010 7C60     		str	r4, [r7, #4]
 568:../libs/CMSIS/core_cm3.c ****   return(result);
 326              		.loc 1 568 0
 327 0012 7B68     		ldr	r3, [r7, #4]
 569:../libs/CMSIS/core_cm3.c **** }
 328              		.loc 1 569 0
 329 0014 1846     		mov	r0, r3
 330 0016 07F10807 		add	r7, r7, #8
 331 001a BD46     		mov	sp, r7
 332 001c 90BC     		pop	{r4, r7}
 333 001e 7047     		bx	lr
 334              		.cfi_endproc
 335              	.LFE8:
 337              		.section	.text.__set_FAULTMASK,"ax",%progbits
 338              		.align	2
 339              		.global	__set_FAULTMASK
 340              		.thumb
 341              		.thumb_func
 343              	__set_FAULTMASK:
 344              	.LFB9:
 570:../libs/CMSIS/core_cm3.c **** 
 571:../libs/CMSIS/core_cm3.c **** /**
 572:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Fault Mask value
 573:../libs/CMSIS/core_cm3.c ****  *
 574:../libs/CMSIS/core_cm3.c ****  * @param  faultMask  faultMask value
 575:../libs/CMSIS/core_cm3.c ****  *
 576:../libs/CMSIS/core_cm3.c ****  * Set the fault mask register
 577:../libs/CMSIS/core_cm3.c ****  */
 578:../libs/CMSIS/core_cm3.c **** void __set_FAULTMASK(uint32_t faultMask)
 579:../libs/CMSIS/core_cm3.c **** {
 345              		.loc 1 579 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 8
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350 0000 80B4     		push	{r7}
 351              	.LCFI15:
 352              		.cfi_def_cfa_offset 4
 353              		.cfi_offset 7, -4
 354 0002 83B0     		sub	sp, sp, #12
 355              	.LCFI16:
 356              		.cfi_def_cfa_offset 16
 357 0004 00AF     		add	r7, sp, #0
 358              	.LCFI17:
 359              		.cfi_def_cfa_register 7
 360 0006 7860     		str	r0, [r7, #4]
 580:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 361              		.loc 1 580 0
 362 0008 7B68     		ldr	r3, [r7, #4]
 363              	@ 580 "../libs/CMSIS/core_cm3.c" 1
 364 000a 83F31388 		MSR faultmask, r3
 365              	@ 0 "" 2
 581:../libs/CMSIS/core_cm3.c **** }
 366              		.loc 1 581 0
 367              		.thumb
 368 000e 07F10C07 		add	r7, r7, #12
 369 0012 BD46     		mov	sp, r7
 370 0014 80BC     		pop	{r7}
 371 0016 7047     		bx	lr
 372              		.cfi_endproc
 373              	.LFE9:
 375              		.section	.text.__get_CONTROL,"ax",%progbits
 376              		.align	2
 377              		.global	__get_CONTROL
 378              		.thumb
 379              		.thumb_func
 381              	__get_CONTROL:
 382              	.LFB10:
 582:../libs/CMSIS/core_cm3.c **** 
 583:../libs/CMSIS/core_cm3.c **** /**
 584:../libs/CMSIS/core_cm3.c ****  * @brief  Return the Control Register value
 585:../libs/CMSIS/core_cm3.c **** * 
 586:../libs/CMSIS/core_cm3.c **** *  @return Control value
 587:../libs/CMSIS/core_cm3.c ****  *
 588:../libs/CMSIS/core_cm3.c ****  * Return the content of the control register
 589:../libs/CMSIS/core_cm3.c ****  */
 590:../libs/CMSIS/core_cm3.c **** uint32_t __get_CONTROL(void)
 591:../libs/CMSIS/core_cm3.c **** {
 383              		.loc 1 591 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 8
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388 0000 90B4     		push	{r4, r7}
 389              	.LCFI18:
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 4, -8
 392              		.cfi_offset 7, -4
 393 0002 82B0     		sub	sp, sp, #8
 394              	.LCFI19:
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              	.LCFI20:
 398              		.cfi_def_cfa_register 7
 592:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
 399              		.loc 1 592 0
 400 0006 4FF00003 		mov	r3, #0
 401 000a 7B60     		str	r3, [r7, #4]
 593:../libs/CMSIS/core_cm3.c **** 
 594:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 402              		.loc 1 594 0
 403              	@ 594 "../libs/CMSIS/core_cm3.c" 1
 404 000c EFF31484 		MRS r4, control
 405              	@ 0 "" 2
 406              		.thumb
 407 0010 7C60     		str	r4, [r7, #4]
 595:../libs/CMSIS/core_cm3.c ****   return(result);
 408              		.loc 1 595 0
 409 0012 7B68     		ldr	r3, [r7, #4]
 596:../libs/CMSIS/core_cm3.c **** }
 410              		.loc 1 596 0
 411 0014 1846     		mov	r0, r3
 412 0016 07F10807 		add	r7, r7, #8
 413 001a BD46     		mov	sp, r7
 414 001c 90BC     		pop	{r4, r7}
 415 001e 7047     		bx	lr
 416              		.cfi_endproc
 417              	.LFE10:
 419              		.section	.text.__set_CONTROL,"ax",%progbits
 420              		.align	2
 421              		.global	__set_CONTROL
 422              		.thumb
 423              		.thumb_func
 425              	__set_CONTROL:
 426              	.LFB11:
 597:../libs/CMSIS/core_cm3.c **** 
 598:../libs/CMSIS/core_cm3.c **** /**
 599:../libs/CMSIS/core_cm3.c ****  * @brief  Set the Control Register value
 600:../libs/CMSIS/core_cm3.c ****  *
 601:../libs/CMSIS/core_cm3.c ****  * @param  control  Control value
 602:../libs/CMSIS/core_cm3.c ****  *
 603:../libs/CMSIS/core_cm3.c ****  * Set the control register
 604:../libs/CMSIS/core_cm3.c ****  */
 605:../libs/CMSIS/core_cm3.c **** void __set_CONTROL(uint32_t control)
 606:../libs/CMSIS/core_cm3.c **** {
 427              		.loc 1 606 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 8
 430              		@ frame_needed = 1, uses_anonymous_args = 0
 431              		@ link register save eliminated.
 432 0000 80B4     		push	{r7}
 433              	.LCFI21:
 434              		.cfi_def_cfa_offset 4
 435              		.cfi_offset 7, -4
 436 0002 83B0     		sub	sp, sp, #12
 437              	.LCFI22:
 438              		.cfi_def_cfa_offset 16
 439 0004 00AF     		add	r7, sp, #0
 440              	.LCFI23:
 441              		.cfi_def_cfa_register 7
 442 0006 7860     		str	r0, [r7, #4]
 607:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 443              		.loc 1 607 0
 444 0008 7B68     		ldr	r3, [r7, #4]
 445              	@ 607 "../libs/CMSIS/core_cm3.c" 1
 446 000a 83F31488 		MSR control, r3
 447              	@ 0 "" 2
 608:../libs/CMSIS/core_cm3.c **** }
 448              		.loc 1 608 0
 449              		.thumb
 450 000e 07F10C07 		add	r7, r7, #12
 451 0012 BD46     		mov	sp, r7
 452 0014 80BC     		pop	{r7}
 453 0016 7047     		bx	lr
 454              		.cfi_endproc
 455              	.LFE11:
 457              		.section	.text.__REV,"ax",%progbits
 458              		.align	2
 459              		.global	__REV
 460              		.thumb
 461              		.thumb_func
 463              	__REV:
 464              	.LFB12:
 609:../libs/CMSIS/core_cm3.c **** 
 610:../libs/CMSIS/core_cm3.c **** 
 611:../libs/CMSIS/core_cm3.c **** /**
 612:../libs/CMSIS/core_cm3.c ****  * @brief  Reverse byte order in integer value
 613:../libs/CMSIS/core_cm3.c ****  *
 614:../libs/CMSIS/core_cm3.c ****  * @param  value  value to reverse
 615:../libs/CMSIS/core_cm3.c ****  * @return        reversed value
 616:../libs/CMSIS/core_cm3.c ****  *
 617:../libs/CMSIS/core_cm3.c ****  * Reverse byte order in integer value
 618:../libs/CMSIS/core_cm3.c ****  */
 619:../libs/CMSIS/core_cm3.c **** uint32_t __REV(uint32_t value)
 620:../libs/CMSIS/core_cm3.c **** {
 465              		.loc 1 620 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 16
 468              		@ frame_needed = 1, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470 0000 90B4     		push	{r4, r7}
 471              	.LCFI24:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 7, -4
 475 0002 84B0     		sub	sp, sp, #16
 476              	.LCFI25:
 477              		.cfi_def_cfa_offset 24
 478 0004 00AF     		add	r7, sp, #0
 479              	.LCFI26:
 480              		.cfi_def_cfa_register 7
 481 0006 7860     		str	r0, [r7, #4]
 621:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
 482              		.loc 1 621 0
 483 0008 4FF00003 		mov	r3, #0
 484 000c FB60     		str	r3, [r7, #12]
 622:../libs/CMSIS/core_cm3.c ****   
 623:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 485              		.loc 1 623 0
 486 000e 7B68     		ldr	r3, [r7, #4]
 487              	@ 623 "../libs/CMSIS/core_cm3.c" 1
 488 0010 1CBA     		rev r4, r3
 489              	@ 0 "" 2
 490              		.thumb
 491 0012 FC60     		str	r4, [r7, #12]
 624:../libs/CMSIS/core_cm3.c ****   return(result);
 492              		.loc 1 624 0
 493 0014 FB68     		ldr	r3, [r7, #12]
 625:../libs/CMSIS/core_cm3.c **** }
 494              		.loc 1 625 0
 495 0016 1846     		mov	r0, r3
 496 0018 07F11007 		add	r7, r7, #16
 497 001c BD46     		mov	sp, r7
 498 001e 90BC     		pop	{r4, r7}
 499 0020 7047     		bx	lr
 500              		.cfi_endproc
 501              	.LFE12:
 503 0022 00BF     		.section	.text.__REV16,"ax",%progbits
 504              		.align	2
 505              		.global	__REV16
 506              		.thumb
 507              		.thumb_func
 509              	__REV16:
 510              	.LFB13:
 626:../libs/CMSIS/core_cm3.c **** 
 627:../libs/CMSIS/core_cm3.c **** /**
 628:../libs/CMSIS/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 629:../libs/CMSIS/core_cm3.c ****  *
 630:../libs/CMSIS/core_cm3.c ****  * @param  value  value to reverse
 631:../libs/CMSIS/core_cm3.c ****  * @return        reversed value
 632:../libs/CMSIS/core_cm3.c ****  *
 633:../libs/CMSIS/core_cm3.c ****  * Reverse byte order in unsigned short value
 634:../libs/CMSIS/core_cm3.c ****  */
 635:../libs/CMSIS/core_cm3.c **** uint32_t __REV16(uint16_t value)
 636:../libs/CMSIS/core_cm3.c **** {
 511              		.loc 1 636 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 16
 514              		@ frame_needed = 1, uses_anonymous_args = 0
 515              		@ link register save eliminated.
 516 0000 90B4     		push	{r4, r7}
 517              	.LCFI27:
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 4, -8
 520              		.cfi_offset 7, -4
 521 0002 84B0     		sub	sp, sp, #16
 522              	.LCFI28:
 523              		.cfi_def_cfa_offset 24
 524 0004 00AF     		add	r7, sp, #0
 525              	.LCFI29:
 526              		.cfi_def_cfa_register 7
 527 0006 0346     		mov	r3, r0
 528 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 637:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
 529              		.loc 1 637 0
 530 000a 4FF00003 		mov	r3, #0
 531 000e FB60     		str	r3, [r7, #12]
 638:../libs/CMSIS/core_cm3.c ****   
 639:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 532              		.loc 1 639 0
 533 0010 FB88     		ldrh	r3, [r7, #6]	@ movhi
 534              	@ 639 "../libs/CMSIS/core_cm3.c" 1
 535 0012 5CBA     		rev16 r4, r3
 536              	@ 0 "" 2
 537              		.thumb
 538 0014 FC60     		str	r4, [r7, #12]
 640:../libs/CMSIS/core_cm3.c ****   return(result);
 539              		.loc 1 640 0
 540 0016 FB68     		ldr	r3, [r7, #12]
 641:../libs/CMSIS/core_cm3.c **** }
 541              		.loc 1 641 0
 542 0018 1846     		mov	r0, r3
 543 001a 07F11007 		add	r7, r7, #16
 544 001e BD46     		mov	sp, r7
 545 0020 90BC     		pop	{r4, r7}
 546 0022 7047     		bx	lr
 547              		.cfi_endproc
 548              	.LFE13:
 550              		.section	.text.__REVSH,"ax",%progbits
 551              		.align	2
 552              		.global	__REVSH
 553              		.thumb
 554              		.thumb_func
 556              	__REVSH:
 557              	.LFB14:
 642:../libs/CMSIS/core_cm3.c **** 
 643:../libs/CMSIS/core_cm3.c **** /**
 644:../libs/CMSIS/core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 645:../libs/CMSIS/core_cm3.c ****  *
 646:../libs/CMSIS/core_cm3.c ****  * @param  value  value to reverse
 647:../libs/CMSIS/core_cm3.c ****  * @return        reversed value
 648:../libs/CMSIS/core_cm3.c ****  *
 649:../libs/CMSIS/core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 650:../libs/CMSIS/core_cm3.c ****  */
 651:../libs/CMSIS/core_cm3.c **** int32_t __REVSH(int16_t value)
 652:../libs/CMSIS/core_cm3.c **** {
 558              		.loc 1 652 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 16
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 563 0000 90B4     		push	{r4, r7}
 564              	.LCFI30:
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 4, -8
 567              		.cfi_offset 7, -4
 568 0002 84B0     		sub	sp, sp, #16
 569              	.LCFI31:
 570              		.cfi_def_cfa_offset 24
 571 0004 00AF     		add	r7, sp, #0
 572              	.LCFI32:
 573              		.cfi_def_cfa_register 7
 574 0006 0346     		mov	r3, r0
 575 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 653:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
 576              		.loc 1 653 0
 577 000a 4FF00003 		mov	r3, #0
 578 000e FB60     		str	r3, [r7, #12]
 654:../libs/CMSIS/core_cm3.c ****   
 655:../libs/CMSIS/core_cm3.c ****   __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 579              		.loc 1 655 0
 580 0010 FB88     		ldrh	r3, [r7, #6]	@ movhi
 581              	@ 655 "../libs/CMSIS/core_cm3.c" 1
 582 0012 DCBA     		revsh r4, r3
 583              	@ 0 "" 2
 584              		.thumb
 585 0014 FC60     		str	r4, [r7, #12]
 656:../libs/CMSIS/core_cm3.c ****   return(result);
 586              		.loc 1 656 0
 587 0016 FB68     		ldr	r3, [r7, #12]
 657:../libs/CMSIS/core_cm3.c **** }
 588              		.loc 1 657 0
 589 0018 1846     		mov	r0, r3
 590 001a 07F11007 		add	r7, r7, #16
 591 001e BD46     		mov	sp, r7
 592 0020 90BC     		pop	{r4, r7}
 593 0022 7047     		bx	lr
 594              		.cfi_endproc
 595              	.LFE14:
 597              		.section	.text.__RBIT,"ax",%progbits
 598              		.align	2
 599              		.global	__RBIT
 600              		.thumb
 601              		.thumb_func
 603              	__RBIT:
 604              	.LFB15:
 658:../libs/CMSIS/core_cm3.c **** 
 659:../libs/CMSIS/core_cm3.c **** /**
 660:../libs/CMSIS/core_cm3.c ****  * @brief  Reverse bit order of value
 661:../libs/CMSIS/core_cm3.c ****  *
 662:../libs/CMSIS/core_cm3.c ****  * @param  value  value to reverse
 663:../libs/CMSIS/core_cm3.c ****  * @return        reversed value
 664:../libs/CMSIS/core_cm3.c ****  *
 665:../libs/CMSIS/core_cm3.c ****  * Reverse bit order of value
 666:../libs/CMSIS/core_cm3.c ****  */
 667:../libs/CMSIS/core_cm3.c **** uint32_t __RBIT(uint32_t value)
 668:../libs/CMSIS/core_cm3.c **** {
 605              		.loc 1 668 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 16
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609              		@ link register save eliminated.
 610 0000 90B4     		push	{r4, r7}
 611              	.LCFI33:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 4, -8
 614              		.cfi_offset 7, -4
 615 0002 84B0     		sub	sp, sp, #16
 616              	.LCFI34:
 617              		.cfi_def_cfa_offset 24
 618 0004 00AF     		add	r7, sp, #0
 619              	.LCFI35:
 620              		.cfi_def_cfa_register 7
 621 0006 7860     		str	r0, [r7, #4]
 669:../libs/CMSIS/core_cm3.c ****   uint32_t result=0;
 622              		.loc 1 669 0
 623 0008 4FF00003 		mov	r3, #0
 624 000c FB60     		str	r3, [r7, #12]
 670:../libs/CMSIS/core_cm3.c ****   
 671:../libs/CMSIS/core_cm3.c ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 625              		.loc 1 671 0
 626 000e 7B68     		ldr	r3, [r7, #4]
 627              	@ 671 "../libs/CMSIS/core_cm3.c" 1
 628 0010 93FAA3F4 		rbit r4, r3
 629              	@ 0 "" 2
 630              		.thumb
 631 0014 FC60     		str	r4, [r7, #12]
 672:../libs/CMSIS/core_cm3.c ****    return(result);
 632              		.loc 1 672 0
 633 0016 FB68     		ldr	r3, [r7, #12]
 673:../libs/CMSIS/core_cm3.c **** }
 634              		.loc 1 673 0
 635 0018 1846     		mov	r0, r3
 636 001a 07F11007 		add	r7, r7, #16
 637 001e BD46     		mov	sp, r7
 638 0020 90BC     		pop	{r4, r7}
 639 0022 7047     		bx	lr
 640              		.cfi_endproc
 641              	.LFE15:
 643              		.section	.text.__LDREXB,"ax",%progbits
 644              		.align	2
 645              		.global	__LDREXB
 646              		.thumb
 647              		.thumb_func
 649              	__LDREXB:
 650              	.LFB16:
 674:../libs/CMSIS/core_cm3.c **** 
 675:../libs/CMSIS/core_cm3.c **** /**
 676:../libs/CMSIS/core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 677:../libs/CMSIS/core_cm3.c ****  *
 678:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 679:../libs/CMSIS/core_cm3.c ****  * @return        value of (*address)
 680:../libs/CMSIS/core_cm3.c ****  *
 681:../libs/CMSIS/core_cm3.c ****  * Exclusive LDR command for 8 bit value
 682:../libs/CMSIS/core_cm3.c ****  */
 683:../libs/CMSIS/core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 684:../libs/CMSIS/core_cm3.c **** {
 651              		.loc 1 684 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 16
 654              		@ frame_needed = 1, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 656 0000 90B4     		push	{r4, r7}
 657              	.LCFI36:
 658              		.cfi_def_cfa_offset 8
 659              		.cfi_offset 4, -8
 660              		.cfi_offset 7, -4
 661 0002 84B0     		sub	sp, sp, #16
 662              	.LCFI37:
 663              		.cfi_def_cfa_offset 24
 664 0004 00AF     		add	r7, sp, #0
 665              	.LCFI38:
 666              		.cfi_def_cfa_register 7
 667 0006 7860     		str	r0, [r7, #4]
 685:../libs/CMSIS/core_cm3.c ****     uint8_t result=0;
 668              		.loc 1 685 0
 669 0008 4FF00003 		mov	r3, #0
 670 000c FB73     		strb	r3, [r7, #15]
 686:../libs/CMSIS/core_cm3.c ****   
 687:../libs/CMSIS/core_cm3.c ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 671              		.loc 1 687 0
 672 000e 7B68     		ldr	r3, [r7, #4]
 673              	@ 687 "../libs/CMSIS/core_cm3.c" 1
 674 0010 D3E84F4F 		ldrexb r4, [r3]
 675              	@ 0 "" 2
 676              		.thumb
 677 0014 FC73     		strb	r4, [r7, #15]
 688:../libs/CMSIS/core_cm3.c ****    return(result);
 678              		.loc 1 688 0
 679 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 689:../libs/CMSIS/core_cm3.c **** }
 680              		.loc 1 689 0
 681 0018 1846     		mov	r0, r3
 682 001a 07F11007 		add	r7, r7, #16
 683 001e BD46     		mov	sp, r7
 684 0020 90BC     		pop	{r4, r7}
 685 0022 7047     		bx	lr
 686              		.cfi_endproc
 687              	.LFE16:
 689              		.section	.text.__LDREXH,"ax",%progbits
 690              		.align	2
 691              		.global	__LDREXH
 692              		.thumb
 693              		.thumb_func
 695              	__LDREXH:
 696              	.LFB17:
 690:../libs/CMSIS/core_cm3.c **** 
 691:../libs/CMSIS/core_cm3.c **** /**
 692:../libs/CMSIS/core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 693:../libs/CMSIS/core_cm3.c ****  *
 694:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 695:../libs/CMSIS/core_cm3.c ****  * @return        value of (*address)
 696:../libs/CMSIS/core_cm3.c ****  *
 697:../libs/CMSIS/core_cm3.c ****  * Exclusive LDR command for 16 bit values
 698:../libs/CMSIS/core_cm3.c ****  */
 699:../libs/CMSIS/core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 700:../libs/CMSIS/core_cm3.c **** {
 697              		.loc 1 700 0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 16
 700              		@ frame_needed = 1, uses_anonymous_args = 0
 701              		@ link register save eliminated.
 702 0000 90B4     		push	{r4, r7}
 703              	.LCFI39:
 704              		.cfi_def_cfa_offset 8
 705              		.cfi_offset 4, -8
 706              		.cfi_offset 7, -4
 707 0002 84B0     		sub	sp, sp, #16
 708              	.LCFI40:
 709              		.cfi_def_cfa_offset 24
 710 0004 00AF     		add	r7, sp, #0
 711              	.LCFI41:
 712              		.cfi_def_cfa_register 7
 713 0006 7860     		str	r0, [r7, #4]
 701:../libs/CMSIS/core_cm3.c ****     uint16_t result=0;
 714              		.loc 1 701 0
 715 0008 4FF00003 		mov	r3, #0
 716 000c FB81     		strh	r3, [r7, #14]	@ movhi
 702:../libs/CMSIS/core_cm3.c ****   
 703:../libs/CMSIS/core_cm3.c ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 717              		.loc 1 703 0
 718 000e 7B68     		ldr	r3, [r7, #4]
 719              	@ 703 "../libs/CMSIS/core_cm3.c" 1
 720 0010 D3E85F4F 		ldrexh r4, [r3]
 721              	@ 0 "" 2
 722              		.thumb
 723 0014 FC81     		strh	r4, [r7, #14]	@ movhi
 704:../libs/CMSIS/core_cm3.c ****    return(result);
 724              		.loc 1 704 0
 725 0016 FB89     		ldrh	r3, [r7, #14]
 705:../libs/CMSIS/core_cm3.c **** }
 726              		.loc 1 705 0
 727 0018 1846     		mov	r0, r3
 728 001a 07F11007 		add	r7, r7, #16
 729 001e BD46     		mov	sp, r7
 730 0020 90BC     		pop	{r4, r7}
 731 0022 7047     		bx	lr
 732              		.cfi_endproc
 733              	.LFE17:
 735              		.section	.text.__LDREXW,"ax",%progbits
 736              		.align	2
 737              		.global	__LDREXW
 738              		.thumb
 739              		.thumb_func
 741              	__LDREXW:
 742              	.LFB18:
 706:../libs/CMSIS/core_cm3.c **** 
 707:../libs/CMSIS/core_cm3.c **** /**
 708:../libs/CMSIS/core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 709:../libs/CMSIS/core_cm3.c ****  *
 710:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 711:../libs/CMSIS/core_cm3.c ****  * @return        value of (*address)
 712:../libs/CMSIS/core_cm3.c ****  *
 713:../libs/CMSIS/core_cm3.c ****  * Exclusive LDR command for 32 bit values
 714:../libs/CMSIS/core_cm3.c ****  */
 715:../libs/CMSIS/core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 716:../libs/CMSIS/core_cm3.c **** {
 743              		.loc 1 716 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 16
 746              		@ frame_needed = 1, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 748 0000 90B4     		push	{r4, r7}
 749              	.LCFI42:
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 4, -8
 752              		.cfi_offset 7, -4
 753 0002 84B0     		sub	sp, sp, #16
 754              	.LCFI43:
 755              		.cfi_def_cfa_offset 24
 756 0004 00AF     		add	r7, sp, #0
 757              	.LCFI44:
 758              		.cfi_def_cfa_register 7
 759 0006 7860     		str	r0, [r7, #4]
 717:../libs/CMSIS/core_cm3.c ****     uint32_t result=0;
 760              		.loc 1 717 0
 761 0008 4FF00003 		mov	r3, #0
 762 000c FB60     		str	r3, [r7, #12]
 718:../libs/CMSIS/core_cm3.c ****   
 719:../libs/CMSIS/core_cm3.c ****    __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 763              		.loc 1 719 0
 764 000e 7B68     		ldr	r3, [r7, #4]
 765              	@ 719 "../libs/CMSIS/core_cm3.c" 1
 766 0010 53E8004F 		ldrex r4, [r3]
 767              	@ 0 "" 2
 768              		.thumb
 769 0014 FC60     		str	r4, [r7, #12]
 720:../libs/CMSIS/core_cm3.c ****    return(result);
 770              		.loc 1 720 0
 771 0016 FB68     		ldr	r3, [r7, #12]
 721:../libs/CMSIS/core_cm3.c **** }
 772              		.loc 1 721 0
 773 0018 1846     		mov	r0, r3
 774 001a 07F11007 		add	r7, r7, #16
 775 001e BD46     		mov	sp, r7
 776 0020 90BC     		pop	{r4, r7}
 777 0022 7047     		bx	lr
 778              		.cfi_endproc
 779              	.LFE18:
 781              		.section	.text.__STREXB,"ax",%progbits
 782              		.align	2
 783              		.global	__STREXB
 784              		.thumb
 785              		.thumb_func
 787              	__STREXB:
 788              	.LFB19:
 722:../libs/CMSIS/core_cm3.c **** 
 723:../libs/CMSIS/core_cm3.c **** /**
 724:../libs/CMSIS/core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 725:../libs/CMSIS/core_cm3.c ****  *
 726:../libs/CMSIS/core_cm3.c ****  * @param  value  value to store
 727:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 728:../libs/CMSIS/core_cm3.c ****  * @return        successful / failed
 729:../libs/CMSIS/core_cm3.c ****  *
 730:../libs/CMSIS/core_cm3.c ****  * Exclusive STR command for 8 bit values
 731:../libs/CMSIS/core_cm3.c ****  */
 732:../libs/CMSIS/core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 733:../libs/CMSIS/core_cm3.c **** {
 789              		.loc 1 733 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 16
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794 0000 90B4     		push	{r4, r7}
 795              	.LCFI45:
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 4, -8
 798              		.cfi_offset 7, -4
 799 0002 84B0     		sub	sp, sp, #16
 800              	.LCFI46:
 801              		.cfi_def_cfa_offset 24
 802 0004 00AF     		add	r7, sp, #0
 803              	.LCFI47:
 804              		.cfi_def_cfa_register 7
 805 0006 0346     		mov	r3, r0
 806 0008 3960     		str	r1, [r7, #0]
 807 000a FB71     		strb	r3, [r7, #7]
 734:../libs/CMSIS/core_cm3.c ****    uint32_t result=0;
 808              		.loc 1 734 0
 809 000c 4FF00003 		mov	r3, #0
 810 0010 FB60     		str	r3, [r7, #12]
 735:../libs/CMSIS/core_cm3.c ****   
 736:../libs/CMSIS/core_cm3.c ****    __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 811              		.loc 1 736 0
 812 0012 3B68     		ldr	r3, [r7, #0]
 813 0014 FA79     		ldrb	r2, [r7, #7]
 814              	@ 736 "../libs/CMSIS/core_cm3.c" 1
 815 0016 C3E8442F 		strexb r4, r2, [r3]
 816              	@ 0 "" 2
 817              		.thumb
 818 001a FC60     		str	r4, [r7, #12]
 737:../libs/CMSIS/core_cm3.c ****    return(result);
 819              		.loc 1 737 0
 820 001c FB68     		ldr	r3, [r7, #12]
 738:../libs/CMSIS/core_cm3.c **** }
 821              		.loc 1 738 0
 822 001e 1846     		mov	r0, r3
 823 0020 07F11007 		add	r7, r7, #16
 824 0024 BD46     		mov	sp, r7
 825 0026 90BC     		pop	{r4, r7}
 826 0028 7047     		bx	lr
 827              		.cfi_endproc
 828              	.LFE19:
 830 002a 00BF     		.section	.text.__STREXH,"ax",%progbits
 831              		.align	2
 832              		.global	__STREXH
 833              		.thumb
 834              		.thumb_func
 836              	__STREXH:
 837              	.LFB20:
 739:../libs/CMSIS/core_cm3.c **** 
 740:../libs/CMSIS/core_cm3.c **** /**
 741:../libs/CMSIS/core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 742:../libs/CMSIS/core_cm3.c ****  *
 743:../libs/CMSIS/core_cm3.c ****  * @param  value  value to store
 744:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 745:../libs/CMSIS/core_cm3.c ****  * @return        successful / failed
 746:../libs/CMSIS/core_cm3.c ****  *
 747:../libs/CMSIS/core_cm3.c ****  * Exclusive STR command for 16 bit values
 748:../libs/CMSIS/core_cm3.c ****  */
 749:../libs/CMSIS/core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 750:../libs/CMSIS/core_cm3.c **** {
 838              		.loc 1 750 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 16
 841              		@ frame_needed = 1, uses_anonymous_args = 0
 842              		@ link register save eliminated.
 843 0000 90B4     		push	{r4, r7}
 844              	.LCFI48:
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 4, -8
 847              		.cfi_offset 7, -4
 848 0002 84B0     		sub	sp, sp, #16
 849              	.LCFI49:
 850              		.cfi_def_cfa_offset 24
 851 0004 00AF     		add	r7, sp, #0
 852              	.LCFI50:
 853              		.cfi_def_cfa_register 7
 854 0006 0346     		mov	r3, r0
 855 0008 3960     		str	r1, [r7, #0]
 856 000a FB80     		strh	r3, [r7, #6]	@ movhi
 751:../libs/CMSIS/core_cm3.c ****    uint32_t result=0;
 857              		.loc 1 751 0
 858 000c 4FF00003 		mov	r3, #0
 859 0010 FB60     		str	r3, [r7, #12]
 752:../libs/CMSIS/core_cm3.c ****   
 753:../libs/CMSIS/core_cm3.c ****    __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 860              		.loc 1 753 0
 861 0012 3B68     		ldr	r3, [r7, #0]
 862 0014 FA88     		ldrh	r2, [r7, #6]	@ movhi
 863              	@ 753 "../libs/CMSIS/core_cm3.c" 1
 864 0016 C3E8542F 		strexh r4, r2, [r3]
 865              	@ 0 "" 2
 866              		.thumb
 867 001a FC60     		str	r4, [r7, #12]
 754:../libs/CMSIS/core_cm3.c ****    return(result);
 868              		.loc 1 754 0
 869 001c FB68     		ldr	r3, [r7, #12]
 755:../libs/CMSIS/core_cm3.c **** }
 870              		.loc 1 755 0
 871 001e 1846     		mov	r0, r3
 872 0020 07F11007 		add	r7, r7, #16
 873 0024 BD46     		mov	sp, r7
 874 0026 90BC     		pop	{r4, r7}
 875 0028 7047     		bx	lr
 876              		.cfi_endproc
 877              	.LFE20:
 879 002a 00BF     		.section	.text.__STREXW,"ax",%progbits
 880              		.align	2
 881              		.global	__STREXW
 882              		.thumb
 883              		.thumb_func
 885              	__STREXW:
 886              	.LFB21:
 756:../libs/CMSIS/core_cm3.c **** 
 757:../libs/CMSIS/core_cm3.c **** /**
 758:../libs/CMSIS/core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 759:../libs/CMSIS/core_cm3.c ****  *
 760:../libs/CMSIS/core_cm3.c ****  * @param  value  value to store
 761:../libs/CMSIS/core_cm3.c ****  * @param  *addr  address pointer
 762:../libs/CMSIS/core_cm3.c ****  * @return        successful / failed
 763:../libs/CMSIS/core_cm3.c ****  *
 764:../libs/CMSIS/core_cm3.c ****  * Exclusive STR command for 32 bit values
 765:../libs/CMSIS/core_cm3.c ****  */
 766:../libs/CMSIS/core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 767:../libs/CMSIS/core_cm3.c **** {
 887              		.loc 1 767 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 16
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891              		@ link register save eliminated.
 892 0000 90B4     		push	{r4, r7}
 893              	.LCFI51:
 894              		.cfi_def_cfa_offset 8
 895              		.cfi_offset 4, -8
 896              		.cfi_offset 7, -4
 897 0002 84B0     		sub	sp, sp, #16
 898              	.LCFI52:
 899              		.cfi_def_cfa_offset 24
 900 0004 00AF     		add	r7, sp, #0
 901              	.LCFI53:
 902              		.cfi_def_cfa_register 7
 903 0006 7860     		str	r0, [r7, #4]
 904 0008 3960     		str	r1, [r7, #0]
 768:../libs/CMSIS/core_cm3.c ****    uint32_t result=0;
 905              		.loc 1 768 0
 906 000a 4FF00003 		mov	r3, #0
 907 000e FB60     		str	r3, [r7, #12]
 769:../libs/CMSIS/core_cm3.c ****   
 770:../libs/CMSIS/core_cm3.c ****    __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 908              		.loc 1 770 0
 909 0010 3B68     		ldr	r3, [r7, #0]
 910 0012 7A68     		ldr	r2, [r7, #4]
 911              	@ 770 "../libs/CMSIS/core_cm3.c" 1
 912 0014 43E80024 		strex r4, r2, [r3]
 913              	@ 0 "" 2
 914              		.thumb
 915 0018 FC60     		str	r4, [r7, #12]
 771:../libs/CMSIS/core_cm3.c ****    return(result);
 916              		.loc 1 771 0
 917 001a FB68     		ldr	r3, [r7, #12]
 772:../libs/CMSIS/core_cm3.c **** }
 918              		.loc 1 772 0
 919 001c 1846     		mov	r0, r3
 920 001e 07F11007 		add	r7, r7, #16
 921 0022 BD46     		mov	sp, r7
 922 0024 90BC     		pop	{r4, r7}
 923 0026 7047     		bx	lr
 924              		.cfi_endproc
 925              	.LFE21:
 927              		.text
 928              	.Letext0:
 929              		.file 2 "d:\\programs\\stm programs\\codebench\\bin\\../lib/gcc/arm-none-eabi/4.7.3/../../../../ar
DEFINED SYMBOLS
                            *ABS*:00000000 core_cm3.c
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:19     .text.__get_PSP:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:24     .text.__get_PSP:00000000 __get_PSP
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:50     .text.__set_PSP:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:55     .text.__set_PSP:00000000 __set_PSP
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:75     .text.__get_MSP:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:80     .text.__get_MSP:00000000 __get_MSP
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:105    .text.__set_MSP:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:110    .text.__set_MSP:00000000 __set_MSP
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:130    .text.__get_BASEPRI:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:135    .text.__get_BASEPRI:00000000 __get_BASEPRI
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:174    .text.__set_BASEPRI:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:179    .text.__set_BASEPRI:00000000 __set_BASEPRI
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:212    .text.__get_PRIMASK:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:217    .text.__get_PRIMASK:00000000 __get_PRIMASK
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:256    .text.__set_PRIMASK:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:261    .text.__set_PRIMASK:00000000 __set_PRIMASK
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:294    .text.__get_FAULTMASK:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:299    .text.__get_FAULTMASK:00000000 __get_FAULTMASK
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:338    .text.__set_FAULTMASK:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:343    .text.__set_FAULTMASK:00000000 __set_FAULTMASK
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:376    .text.__get_CONTROL:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:381    .text.__get_CONTROL:00000000 __get_CONTROL
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:420    .text.__set_CONTROL:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:425    .text.__set_CONTROL:00000000 __set_CONTROL
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:458    .text.__REV:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:463    .text.__REV:00000000 __REV
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:504    .text.__REV16:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:509    .text.__REV16:00000000 __REV16
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:551    .text.__REVSH:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:556    .text.__REVSH:00000000 __REVSH
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:598    .text.__RBIT:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:603    .text.__RBIT:00000000 __RBIT
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:644    .text.__LDREXB:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:649    .text.__LDREXB:00000000 __LDREXB
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:690    .text.__LDREXH:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:695    .text.__LDREXH:00000000 __LDREXH
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:736    .text.__LDREXW:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:741    .text.__LDREXW:00000000 __LDREXW
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:782    .text.__STREXB:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:787    .text.__STREXB:00000000 __STREXB
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:831    .text.__STREXH:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:836    .text.__STREXH:00000000 __STREXH
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:880    .text.__STREXW:00000000 $t
C:\Users\6262~1\AppData\Local\Temp\cc4DlefH.s:885    .text.__STREXW:00000000 __STREXW
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
